; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_xPos:
	DW	100
	DB	0
_yPos:
	DW	100
	DB	0
_squareSize:
	DW	10
	DB	0
_speed:
	DW	6
	DB	0
	SEGMENT BSS
_key:
	DS	1
	SEGMENT DATA
_fruitX:
	DW	0
	DB	0
_fruitY:
	DW	0
	DB	0
_segments:
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
_noSegments:
	DW	1
	DB	0
_maxSegments:
	DW	500
	DB	0
	SEGMENT BSS
_scoreBuf:
	DS	20
_resBuf:
	DS	20
	SEGMENT DATA
_i:
	DW	0
	DB	0
_frames:
	DL	0
_currentGameStatus:
	DW	0
	DB	0
	SEGMENT BSS
_currentDir:
	DS	3
	SEGMENT DATA
_buttonBuf:
	DW	0
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name: Snake for CE
;    4	 * Author: Malcolm Anderson
;    5	 * License: uuhhhhh idk
;    6	 * Description: It's Snake. For the CE.
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	#include <graphx.h>
;   23	#include <debug.h>
;   24	#include <keypadc.h>
;   25	
;   26	#define SCREEN_MAX_X 320
;   27	#define SCREEN_MAX_Y 240
;   28	
;   29	/* Put your function prototypes here */
;   30	void generateFruit(void);
;   31	void drawGame(void);
;   32	void shiftSegments(void);
;   33	/* Put all your globals here */
;   34	
;   35	int xPos = 100;
;   36	int yPos = 100;
;   37	int squareSize = 10;
;   38	int speed = 6;
;   39	kb_key_t key;
;   40	
;   41	int fruitX = 0;
;   42	int fruitY = 0;
;   43	
;   44	int segments[2][500] = 0;
;   45	unsigned int noSegments = 1;
;   46	unsigned int maxSegments = 500;
;   47	char scoreBuf[20];
;   48	char resBuf[20];
;   49	
;   50	int i = 0; // for iterations
;   51	
;   52	
;   53	unsigned long int frames = 0;
;   54	
;   55	enum Direction {
;   56	    Up = 0,
;   57	    Right = 1,
;   58	    Down = 2,
;   59	    Left = 3
;   60	};
;   61	
;   62	enum GameStatus {
;   63	    Playing = 0,
;   64	    Paused = 1,
;   65	    Lost = 2
;   66	};
;   67	
;   68	enum GameStatus currentGameStatus = Playing;
;   69	
;   70	enum Direction currentDir;
;   71	
;   72	int buttonBuf = 0;
	SEGMENT CODE
;   73	
;   74	void main(void) {
_main:
	LD	HL,-43
	CALL	__frameset
;   75	    currentDir = Right;
	LD	BC,1
	LD	(_currentDir),BC
;   76	
;   77	    
;   78	    /* Fill in the body of the main function here */
;   79	
;   80	    gfx_Begin();
	CALL	_gfx_Begin
;   81	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   82	    gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   83	    gfx_SetTextFGColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   84	
;   85	    generateFruit();
	CALL	_generateFruit
;   86	
;   87	
;   88	
;   89	
;   90	    
;   91	    kb_Scan();
	CALL	_kb_Scan
;   92	
;   93	    do {
L_67:
;   94	        /* Update kb_Data */
;   95	        kb_Scan();
	CALL	_kb_Scan
;   96	
;   97	        frames++;
	LD	A,(_frames+3)
	LD	E,A
	LD	A,1
	LD	HL,(_frames)
;   98	        gfx_FillScreen(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	__ladd_b
	LD	(_frames),HL
	LD	A,E
	LD	(_frames+3),A
	CALL	_gfx_FillScreen
	POP	BC
;   99	
;  100	        if (kb_Data[1] == kb_Del) {
	LD	A,(16056338)
	CP	A,128
	JR	NZ,L_14
;  101	            currentGameStatus = Lost;
	LD	BC,2
	LD	(_currentGameStatus),BC
;  102	        }
L_14:
;  103	
;  104	        if (kb_Data[1] == kb_2nd && currentGameStatus == Playing && buttonBuf == 0) {
	LD	A,(16056338)
	CP	A,32
	JR	Z,L__2
	LD	A,1
	JR	L__3
L__2:
	XOR	A,A
L__3:
	LD	(IX+-10),A
	OR	A,A
	JR	NZ,L_13
	LD	HL,(_currentGameStatus)
	CALL	__icmpzero
	JR	NZ,L_13
	LD	HL,(_buttonBuf)
	CALL	__icmpzero
	JR	NZ,L_13
;  105	            currentGameStatus = Paused;
	LD	BC,1
	LD	(_currentGameStatus),BC
;  106	            for (i = 0; i < 50; i++) {
	LD	BC,0
	LD	(_i),BC
	JR	L_7
L_5:
;  107	                boot_WaitShort();
	CALL	_boot_WaitShort
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  108	            }
L_7:
	LD	BC,50
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_5
;  109	
;  110	            buttonBuf = 40;
	LD	BC,40
	LD	(_buttonBuf),BC
;  111	            
;  112	        } else if (kb_Data[1] == kb_2nd && currentGameStatus == Paused && buttonBuf == 0) {
	JR	L_17
L_13:
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_17
	LD	BC,1
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_17
	LD	HL,(_buttonBuf)
	CALL	__icmpzero
	JR	NZ,L_17
;  113	            currentGameStatus = Playing;
	LD	BC,0
	LD	(_currentGameStatus),BC
;  114	            buttonBuf = 40;
	LD	BC,40
	LD	(_buttonBuf),BC
;  115	        }
L_17:
;  116	
;  117	        if (buttonBuf - 1 >= 0) {
	LD	BC,(_buttonBuf)
	DEC	BC
	LD	(IX+-16),BC
	LD	HL,BC
	CALL	__icmpzero
	JP	M,L_19
;  118	            buttonBuf--;
	LD	BC,(IX+-16)
	LD	(_buttonBuf),BC
;  119	        }
L_19:
;  120	
;  121	        if (currentGameStatus == Paused) {
	LD	BC,1
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_20
;  122	            gfx_SetTextFGColor(127);
	LD	BC,127
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  123	
;  124	            sprintf(scoreBuf, "PAUSED - %d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  125	            gfx_PrintStringXY(scoreBuf, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  126	
;  127	            drawGame();
	CALL	_drawGame
;  128	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  129	            boot_WaitShort();
	CALL	_boot_WaitShort
;  130	            boot_WaitShort();
	CALL	_boot_WaitShort
;  131	            boot_WaitShort();
	CALL	_boot_WaitShort
;  132	 
;  133	            continue;
	JR	L_68
;  134	        }
L_20:
;  135	
;  136	        drawGame();
	CALL	_drawGame
;  137	
;  138	
;  139	
;  140	        /* Load group 7 registers */
;  141	        key = kb_Data[7];
	LD	A,(16056350)
;  142	
;  143	        switch (key) {
	UEXT	HL
	LD	L,A
	LD	(_key),A
	CALL	__case8
L__14:
	DW	4
	DB	1
	DW24	L_21	

	DB	2
	DW24	L_30	

	DB	4
	DW24	L_24	

	DB	8
	DW24	L_27	

	DW24	L_39	

;  144	            case kb_Down:
L_21:
;  145	                if (currentDir != Up) currentDir = Down;
	LD	HL,(_currentDir)
	CALL	__icmpzero
	JR	Z,L_39
	LD	BC,2
	LD	(_currentDir),BC
;  146	                break;
	JR	L_39
;  147	            case kb_Right:
L_24:
;  148	                if (currentDir != Left) currentDir = Right;
	LD	BC,3
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_39
	LD	BC,1
	LD	(_currentDir),BC
;  149	                break;
	JR	L_39
;  150	            case kb_Up:
L_27:
;  151	                if (currentDir != Down) currentDir = Up;
	LD	BC,2
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_39
	LD	BC,0
	LD	(_currentDir),BC
;  152	                break;
	JR	L_39
;  153	            case kb_Left:
L_30:
;  154	                if (currentDir != Right) currentDir = Left;
	LD	BC,1
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_39
	LD	BC,3
	LD	(_currentDir),BC
;  155	                break;
;  156	            default:
;  157	                break;
;  158	        }
L_39:
;  159	
;  160	        switch ((int)currentDir)
	LD	HL,(_currentDir)
	CALL	__seqcase
L__19:
	DW	4
	DW	0
	DB	0
	DW24	L_34	

	DW24	L_35	

	DW24	L_36	

	DW24	L_37	

	DW24	L_43	

;  161	        {
;  162	        case 0: // up
L_34:
;  163	            yPos-= speed;
	LD	HL,(_yPos)
	LD	BC,(_speed)
	OR	A,A
	SBC	HL,BC
	LD	(_yPos),HL
;  164	            break;
	JR	L_43
;  165	        case 1: // Right
L_35:
;  166	            xPos+= speed;
	LD	BC,(_speed)
	LD	HL,(_xPos)
	ADD	HL,BC
	LD	(_xPos),HL
;  167	            break;
	JR	L_43
;  168	        case 2: // Down
L_36:
;  169	            yPos+= speed;
	LD	BC,(_speed)
	LD	HL,(_yPos)
	ADD	HL,BC
	LD	(_yPos),HL
;  170	            break;
	JR	L_43
;  171	        case 3: // Left
L_37:
;  172	            xPos-= speed;
	LD	HL,(_xPos)
	LD	BC,(_speed)
	OR	A,A
	SBC	HL,BC
	LD	(_xPos),HL
;  173	            break;
;  174	        default:
;  175	            break;
;  176	        }
L_43:
;  177	
;  178	        if (yPos > SCREEN_MAX_Y) {
	LD	BC,(_yPos)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_42
;  179	            yPos = 0;
	LD	BC,0
	LD	(_yPos),BC
;  180	        } else if (yPos < 0) {
	JR	L_47
L_42:
	LD	HL,(_yPos)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_47
;  181	            yPos = SCREEN_MAX_Y;
	LD	BC,240
	LD	(_yPos),BC
;  182	        }
L_47:
;  183	
;  184	        if (xPos > SCREEN_MAX_X) {
	LD	BC,(_xPos)
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_46
;  185	            xPos = 0;
	LD	BC,0
	LD	(_xPos),BC
;  186	        } else if (xPos < 0) {
	JR	L_48
L_46:
	LD	HL,(_xPos)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_48
;  187	            xPos = SCREEN_MAX_X;
	LD	BC,320
	LD	(_xPos),BC
;  188	        }
L_48:
;  189	
;  190	        shiftSegments();
	CALL	_shiftSegments
;  191	        segments[0][0] = xPos;
	LD	BC,(_xPos)
	LD	(_segments),BC
;  192	        segments[1][0] = yPos;
	LD	BC,1500
	LD	HL,_segments
	ADD	HL,BC
	LD	BC,(_yPos)
	LD	(HL),BC
;  193	
;  194	        for (i = 1; i < noSegments; i++) {
	LD	BC,1
	LD	(_i),BC
	JR	L_54
L_52:
;  195	            if (segments[0][0] == segments[0][i] && segments[1][0] == segments[1][i]) {
	LD	BC,_segments
	LD	(IX+-19),BC
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	BC,(IX+-19)
	ADD	HL,BC
	LD	IY,(IX+-19)
	LD	BC,(IY)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_53
	LD	BC,1500
	LD	HL,_segments
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	BC,(IX+-13)
	LD	HL,(IX+-22)
	ADD	HL,BC
	LD	IY,(IX+-22)
	LD	BC,(IY)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_53
;  196	                currentGameStatus = Lost;
	LD	BC,2
	LD	(_currentGameStatus),BC
;  197	                break;
	JR	L_65
;  198	            }
;  199	        }
L_53:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_54:
	LD	BC,(_noSegments)
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JR	C,L_52
L_65:
;  200	
;  201	        if (abs(segments[0][0] - fruitX) < 10 && abs(segments[1][0] - fruitY) < 10) {
	LD	BC,_segments
	LD	(IX+-9),BC
	LD	HL,(_segments)
	LD	BC,(_fruitX)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_66
	LD	BC,1500
	LD	HL,_segments
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(HL)
	LD	BC,(_fruitY)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_66
;  202	            // speed++;
;  203	            noSegments += 3;
	LD	IY,(_noSegments)
	LEA	BC,IY+3
	LD	(_noSegments),BC
;  204	            if (noSegments >= maxSegments) {
	LD	BC,(_maxSegments)
	LD	HL,(_noSegments)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_66
;  205	
;  206	            } else {
;  207	                shiftSegments();
	CALL	_shiftSegments
;  208	                segments[0][noSegments - 1] = segments[0][noSegments - 2];
	LD	IY,(_noSegments)
	LEA	BC,IY+-2
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	IY,(_noSegments)
	LEA	BC,IY+-1
	LD	(IX+-3),BC
	LD	HL,(IX+-25)
	LD	DE,(HL)
	LD	HL,3
	CALL	__imulu
	LD	BC,HL
	LD	(IX+-40),BC	; spill
	LD	(IX+-43),BC	; spill
	LD	BC,(IX+-40)	; unspill
	LD	HL,(IX+-9)
	LD	(IX+-40),BC	; spill
	LD	BC,(IX+-43)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-40)	; unspill
	LD	(HL),DE
;  209	                segments[1][noSegments - 1] = segments[0][noSegments - 2];
	LD	HL,(IX+-25)
	LD	DE,(HL)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(HL),DE
;  210	                switch ((int)currentDir)
	LD	HL,(_currentDir)
	CALL	__seqcase
L__30:
	DW	4
	DW	0
	DB	0
	DW24	L_56	

	DW24	L_57	

	DW24	L_58	

	DW24	L_59	

	DW24	L_61	

;  211	                {
;  212	                case 0: // up
L_56:
;  213	                    segments[1][noSegments - 1] += squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	BC,(HL)
	LD	HL,(_squareSize)
	LD	DE,HL
	LD	IY,(IX+-28)
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IY),HL
;  214	                    // yPos--;
;  215	                    break;
	JR	L_61
;  216	                case 1: // Right
L_57:
;  217	                    segments[0][noSegments - 1] -= squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-31),HL
	LD	HL,(_squareSize)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	HL,(HL)
	LD	IY,(IX+-31)
	OR	A,A
	SBC	HL,BC
	LD	(IY),HL
;  218	                    // xPos++;
;  219	                    break;
	JR	L_61
;  220	                case 2: // Down
L_58:
;  221	                    segments[1][noSegments - 1] -= squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-34),HL
	LD	HL,(_squareSize)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-34)
	LD	HL,(HL)
	LD	IY,(IX+-34)
	OR	A,A
	SBC	HL,BC
	LD	(IY),HL
;  222	                    // yPos++;
;  223	                    break;
	JR	L_61
;  224	                case 3: // Left
L_59:
;  225	                    segments[0][noSegments - 1] += squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-37),HL
	LD	BC,(HL)
	LD	HL,(_squareSize)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(IX+-37)
	LD	(IY),HL
;  226	                    // xPos--;
;  227	                    break;
;  228	                default:
;  229	                    break;
;  230	                }
L_61:
;  231	                generateFruit();
	CALL	_generateFruit
;  232	            }
;  233	            
;  234	        }
L_66:
;  235	
;  236	
;  237	
;  238	        gfx_SetTextFGColor(127);
	LD	BC,127
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  239	
;  240	        sprintf(scoreBuf, "%d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  241	        gfx_PrintStringXY(scoreBuf, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  242	
;  243	        gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  244	
;  245	
;  246	        boot_WaitShort();
	CALL	_boot_WaitShort
;  247	        boot_WaitShort();
	CALL	_boot_WaitShort
;  248	        boot_WaitShort();
	CALL	_boot_WaitShort
;  249	        
;  250	
;  251	    } while (currentGameStatus != Lost);
L_68:
	LD	BC,2
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_67
;  252	
;  253	    gfx_FillScreen(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  254	    gfx_SetTextFGColor(gfx_yellow);
	LD	BC,231
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  255	
;  256	    sprintf(resBuf, "Your Score Was %d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	LD	BC,_resBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  257	    gfx_PrintStringXY(resBuf,(LCD_WIDTH - gfx_GetStringWidth(resBuf)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,_resBuf
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,_resBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  258	    gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  259	    boot_WaitShort();
	CALL	_boot_WaitShort
;  260	    boot_WaitShort();
	CALL	_boot_WaitShort
;  261	    boot_WaitShort();
	CALL	_boot_WaitShort
;  262	    boot_WaitShort();
	CALL	_boot_WaitShort
;  263	    while (!os_GetCSC());
L_71:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_71
;  264	    
;  265	
;  266	    gfx_End();
	CALL	_gfx_End
;  267	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_resBuf                             STATIC     20   variable
;_squareSize                         STATIC      3   variable
;_maxSegments                        STATIC      3   variable
;_fruitY                             STATIC      3   variable
;_fruitX                             STATIC      3   variable
;_abs                                IMPORT  -----   function
;_segments                           STATIC   3000   variable
;_shiftSegments                      IMPORT  -----   function
;_xPos                               STATIC      3   variable
;_speed                              STATIC      3   variable
;_yPos                               STATIC      3   variable
;_key                                STATIC      1   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_drawGame                           IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_scoreBuf                           STATIC     20   variable
;_noSegments                         STATIC      3   variable
;_sprintf                            IMPORT  -----   function
;_boot_WaitShort                     IMPORT  -----   function
;_i                                  STATIC      3   variable
;_buttonBuf                          STATIC      3   variable
;_currentGameStatus                  STATIC      3   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_frames                             STATIC      4   variable
;_kb_Scan                            IMPORT  -----   function
;_generateFruit                      IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_currentDir                         STATIC      3   variable
;G_1                                  IX-16      3   variable
;G_2                                  IX-13      3   variable
;G_0                                  IX-10      1   variable
;G_3                                   IX-9      3   variable
;G_6                                   IX-6      3   variable
;G_7                                   IX-3      3   variable


; Stack Frame Size: 49 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__13:
	DB	"PAUSED - %d"
	DB	0
L__31:
	DB	"%d"
	DB	0
L__33:
	DB	"Your Score Was %d"
	DB	0
	SEGMENT CODE
;  268	
;  269	void drawGame(void) {
_drawGame:
;  270	    gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  271	
;  272	    for (i = 0; i < noSegments; i++) {
	LD	BC,0
	LD	(_i),BC
	JR	L_77
L_75:
;  273	        gfx_FillRectangle(segments[0][i], segments[1][i], squareSize, squareSize);   
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,_segments
	LD	DE,1500
	ADD	HL,DE
	LD	DE,BC
	ADD	HL,DE
	LD	DE,(HL)
	LD	HL,(_squareSize)
	PUSH	HL
	LD	HL,BC
	LD	BC,(_squareSize)
	PUSH	BC
	PUSH	DE
	LD	BC,_segments
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  274	    }
L_77:
	LD	BC,(_noSegments)
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JR	C,L_75
;  275	
;  276	    gfx_SetColor(gfx_yellow);
	LD	BC,231
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  277	    gfx_FillCircle(fruitX, fruitY, squareSize / 2);
	LD	HL,(_squareSize)
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	BC,(_fruitY)
	PUSH	BC
	LD	BC,(_fruitX)
	PUSH	BC
	CALL	_gfx_FillCircle
	POP	BC
	POP	BC
	POP	BC
;  278	}
	RET	


;**************************** _drawGame ***************************
;Name                         Addr/Register   Size   Type
;_fruitX                             STATIC      3   variable
;_fruitY                             STATIC      3   variable
;_gfx_FillCircle                     IMPORT  -----   function
;_noSegments                         STATIC      3   variable
;_segments                           STATIC   3000   variable
;_squareSize                         STATIC      3   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_i                                  STATIC      3   variable
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  279	
;  280	void generateFruit(void) {
_generateFruit:
;  281	    srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  282	    fruitX = rand() % (SCREEN_MAX_X);
	CALL	_rand
	LD	BC,320
	CALL	__irems
	LD	(_fruitX),HL
;  283	    fruitY = rand() % (SCREEN_MAX_Y);
	CALL	_rand
	LD	BC,240
	CALL	__irems
	LD	(_fruitY),HL
;  284	}
	RET	


;**************************** _generateFruit ***************************
;Name                         Addr/Register   Size   Type
;_fruitY                             STATIC      3   variable
;_fruitX                             STATIC      3   variable
;_rand                               IMPORT  -----   function
;_srand                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  285	
;  286	void shiftSegments(void) {
_shiftSegments:
	LD	HL,-39
	CALL	__frameset
;  287	    for (i = noSegments; i > 0; i--) {
	LD	BC,(_noSegments)
	LD	(_i),BC
	JR	L_84
L_82:
;  288	        segments[0][i] = segments[0][i - 1];
	LD	BC,_segments
	LD	(IX+-6),BC
	LD	DE,(_i)
	DEC	DE
	LD	BC,DE
	LD	HL,3
	CALL	__imulu
	LD	BC,HL
	LD	HL,(_i)
	LD	(IX+-12),BC	; spill
	LD	(IX+-15),HL	; spill
	LD	BC,(IX+-12)	; unspill
	ADD	HL,HL
	LD	(IX+-12),BC	; spill
	LD	BC,(IX+-15)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-12)	; unspill
	LD	(IX+-9),HL
	LD	HL,(IX+-6)
	LD	(IX+-18),BC	; spill
	LD	(IX+-21),BC	; spill
	LD	BC,(IX+-18)	; unspill
	LD	(IX+-18),BC	; spill
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-18)	; unspill
	LD	IY,HL
	LD	HL,(IX+-6)
	LD	(IX+-24),BC	; spill
	LD	BC,(IX+-9)
	LD	(IX+-27),BC	; spill
	LD	BC,(IX+-24)	; unspill
	LD	(IX+-24),BC	; spill
	LD	BC,(IX+-27)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-24)	; unspill
	LD	(IX+-30),BC	; spill
	LD	BC,(IY)
	LD	(IX+-33),BC	; spill
	LD	BC,(IX+-30)	; unspill
	LD	(IX+-30),BC	; spill
	LD	BC,(IX+-33)	; unspill
	LD	(HL),BC
	LD	BC,(IX+-30)	; unspill
;  289	        segments[1][i] = segments[1][i - 1];
	LD	HL,_segments
	LD	(IX+-36),BC	; spill
	LD	BC,1500
	LD	(IX+-39),BC	; spill
	LD	BC,(IX+-36)	; unspill
	LD	(IX+-36),BC	; spill
	LD	BC,(IX+-39)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-36)	; unspill
	LD	(IX+-3),HL
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	BC,(IY)
	LD	(HL),BC
	LD	(_i),DE
;  290	    }
L_84:
	LD	BC,(_i)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_82
;  291	    // segments[0][0] = xPos;
;  292	    // segments[1][0] = yPos;
;  293	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _shiftSegments ***************************
;Name                         Addr/Register   Size   Type
;_segments                           STATIC   3000   variable
;_i                                  STATIC      3   variable
;_noSegments                         STATIC      3   variable


; Stack Frame Size: 45 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillCircle:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _sprintf:ROM
	XREF _abs:ROM
	XREF _rand:ROM
	XREF _srand:ROM
	XREF _os_GetCSC:ROM
	XREF _boot_WaitShort:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __ladd_b:ROM
	XREF __ishru_b:ROM
	XDEF _shiftSegments
	XDEF _generateFruit
	XDEF _drawGame
	XDEF _main
	XDEF _buttonBuf
	XDEF _currentDir
	XDEF _currentGameStatus
	XDEF _frames
	XDEF _i
	XDEF _resBuf
	XDEF _scoreBuf
	XDEF _maxSegments
	XDEF _noSegments
	XDEF _segments
	XDEF _fruitY
	XDEF _fruitX
	XDEF _key
	XDEF _speed
	XDEF _squareSize
	XDEF _yPos
	XDEF _xPos
	END
